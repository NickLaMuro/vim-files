snippet sort
	sort { |${1:x},${2:y}| ${3:body} }
snippet ip
	ip_addr = request.env['REMOTE_ADDR']
snippet xmlr
	REXML::Document.new(File.read(${1:path}))
snippet fileeach
	File.foreach(${1:"<+path}"+>) { |${2:line}| ${3} }
snippet asi
	assert_include ${1:collection}, ${2:object}
snippet class
	class ${1:`Snippet_RubyClassNameFromFilename()`}${2}
		${3}
	end
snippet defi
	def initialize${1}
		${2}
	end
snippet asf
	assert_false ${1:actual}
snippet pathhere
	File.join(File.dirname(__FILE__), *%w[${1:rel_path_here}])
snippet each_with_indexo
	each_with_index do |${1:element},${2:i}|
		${3:body}
	end
snippet bm
	TESTS = ${1:10_000}
	Benchmark.bmbm do |results|
		${2}
	end
snippet asnse
	assert_not_send ${1:send_array}
snippet ascd
	assert_const_defined ${1:object}, ${2:constant_name}
snippet unlesse
	unless ${1:condition}
		${2}
	else
	end
snippet detecto
	detect do |${1:element}|
		${2:body}
	end
snippet rejecto
	reject do |${1:element}|
		${2:body}
	end
snippet select
	select { |${1:element}| ${2:body} }
snippet astr
	assert_true ${1:actual}
snippet mapo
	map do |${1:element}|
		${2:body}
	end
snippet asb
	assert_boolean ${1:actual}
snippet dop
	do |${1:param}|
		${2}
	end
snippet asam
	assert_alias_method ${1:object}, ${2:alias_name}, ${3:original_name}
snippet detect
	detect { |${1:element}| ${2:body} }
snippet injecto
	inject do |${1:total},${2:next}|
		${3:body}
	end
snippet asnem
	assert_not_empty ${1:object}
snippet sorto
	sort do |${1:x},${2:y}|
		${3:body}
	end
snippet mod
	module ${1:`Snippet_RubyClassNameFromFilename()`}
		${2}
	end
snippet asncd
	assert_not_const_defined ${1:object}, ${2:constant_name}
snippet mapdo
	map do |${1:element}|
		${2:body}
	end
snippet task
	desc "${1:Task description}"
	task :${2:task_name}${3: => [:dependent, :tasks]} do
		${4}
	end
snippet classe
	class ${1:ErrorClassName} < ${2:StandardError}; end${3}
snippet each_with_index
	each_with_index { |${1:element},${2:i}| ${3:} }
snippet aspe
	assert_path_exist ${1:path}
snippet http_get
	require 'net/http'
	res = Net::HTTP.get URI.parse('${1:url}')
snippet asse
	assert_send ${1:send_array}
snippet asnrt
	assert_not_respond_to ${1:object}, ${2:method}
snippet http_post
	require 'net/http'
	res = Net::HTTP.post_form URI.parse('${1:url}')${2:, params}
snippet Yl
	File.open(${1:path_to_yml}) { |${2:file}| YAML.load(${3:$2}) }
snippet asnie
	assert_not_in_epsilon ${1:expected_float}, ${2:actual_float}
snippet Yd
	File.open(${1:path_to_yml}, "w") { |${2:file}| YAML.dump(${3:obj}, ${4:$2}) }
snippet reject
	reject { |${1:element}| ${2:body} }
snippet each
	each { |${1:element}| ${2:body} }
snippet asrm
	assert_raise_message ${1:expected_message}
snippet asfa
	assert_fail_assertion { ${1:block} }
snippet eacho
	each do |${1:element}|
		${2:body}
	end
snippet asp
	assert_predicate ${1:object}, ${2:predicate}
snippet asie
	assert_in_epsilon ${1:expected_float}, ${2:actual_float}
snippet fopen
	File.open(${1:path}, "${2:rwab}") { |${3:file}| ${4} }
snippet eawido
	each_with_index do |${1:element},${2:i}|
		${3:body}
	end
	
snippet asnp
	assert_not_predicate ${1:object}, ${2:predicate}
snippet eado
	each do |${1:element}|
		${2:body}
	end
snippet module
	module ${1:`Snippet_RubyClassNameFromFilename()`}
		module ClassMethods
			${2}
		end
	
		module InstanceMethods
	
		end
	
		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
snippet asrko
	assert_raise_kind_of(${1:kinds...}) { ${2:block} }
snippet asem
	assert_empty ${1:object}
snippet asnid
	assert_not_in_delta ${1:expected_float}, ${2:actual_float}
snippet selecto
	select do |${1:element}|
		${2:body}
	end
snippet aspne
	assert_path_not_exist ${1:path}
snippet fread
	File.read(${1})
snippet asni
	assert_not_include ${1:collection}, ${2:object}
snippet asc
	assert_compare ${1:expected}, ${2:operator}, ${3:actual}
snippet dglob
	Dir.glob(${1:"<+dir}"+>) { |${2:file}| ${3} }
snippet inject
	inject { |${1:total},${2:next}| ${3:body} }
snippet injdo
	inject(${1:init}) do |${2:total}, ${3:next}|
		${4:body}
	end
