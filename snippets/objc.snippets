#dict
snippet dict
	NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];${2}

#cli
snippet cli
	@interface ${1:ClassName} : ${2:NSObject}
	{${3}
	}
	${4}
	@end

#rel
snippet rel
	[${1:foo} release];${2}

#I
snippet I
	+ (void) initialize
	{
		[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWIthObjectsAndKeys:
			${1}@"value", @"key",
			nil]];
	}

#cati
snippet cati
	@interface ${1:NSObject} (${2:Category})
	${3}
	@end

#log
snippet log
	NSLog(@"${1}"${2});${3}

#prop
snippet prop
	@property (${1:retain}) ${2:NSSomeClass} *${3:$2};${4}

#sel
snippet sel
	@selector(${1:method}:)${2}

#sm
snippet sm
	- (${1:id}) ${2:method}:(${3:id})${4:anArgument}
	{
		$1 res = [super $2:$4];${5}
		return res;
	}


#m
----------

#m.method
snippet m method
	- (${1:id}) ${2:method}
	{${3}
		${4:return nil;}
	}


#m.class method
snippet m class method
	+ (${1:id}) ${2:method}
	{${3}
		return nil;
	}


----------

#objacc
snippet objacc
	- (${1:id})${2:thing}
	{
		return $2;
	}
	
	- (void) set$2:($1)
	{
		$1 old$2 = $2;
		$2 = [aValue retain];
		[old$2 release];
	}

#alloc
snippet alloc
	[[${1:foo} alloc] init]${2};${3}

#bez
snippet bez
	NSBezierPath *${1:path} = [NSBezierPath bezierPath];${2}

#Imp
snippet Imp
	#import "${1:`Filename()`.h}"${2}

#ret
snippet ret
	[${1:foo} retain];${2}

#forarray
snippet forarray
	unsigned int	${1:object}Count = [${2:array} count];
	
	for (unsigned int index = 0; index < $1Count; index++)
	{
		${3:id}	$1 = [$2 $1AtIndex:index];
		${4}
	}

#objc
snippet objc
	@interface ${1:`Filename('', 'object')`} : ${2:NSObject}
	{
	}
	@end
	
	@implementation $1
	- (id) init
	{
		if (self = [super init])
		{${3}
		}
		return self
	}
	@end

#syn
snippet syn
	@synthesize ${1:NSSomeClass};${2}

#cat
snippet cat
	@interface ${1:NSObject} (${2:Category})
	@end
	
	@implementation $1 ($2)
	${3}
	@end

#array
snippet array
	NSMutableArray *${1:array} = [NSMutable array];${2}

