#moc
snippet moc
	${1:var} = mock("${2:mock_name}"${3:, :null_object => true})
	${4}

#isbl
snippet isbl
	it_should_behave_like '${1:do something}'

#anrb
snippet anrb
	and_return { ${1} }

#shtemp
snippet shtemp
	response.should render_template(:${1:template})
	${2}

#shc
snippet shc
	lambda do
		${1}
	end.should change(${2:target}, :${3:method}).from(${4:old_value}).to(${5:new_value}).by(${6:change})

#atl
snippet atl
	at_least(${1:n}).times

#des
snippet des
	describe "${1:subject}" do
		${2}
	end

#shnt
snippet shnt
	lambda { ${1} }.should_not throw_symbol(:${2:symbol})
	${3}

#sht
snippet sht
	${1:target}.should throw_symble(:${2:symbol})
	${3}

#desc
snippet desc
	require 'spec_helper'
	
	describe ${1:`Snippet_RubyClassNameFromFilename()`} do
		${2}
	end

#shnbc
snippet shnbc
	${1:target}.should_not be_close(${2:result}, ${3:tolerance})
	${4}

#sheq
snippet sheq
	${1:target}.should equal(${2:value})
	${3}

#anr
snippet anr
	and_return(${1:value})

#shne
snippet shne
	${1:target}.should_not eql(${2:value})
	${3}

#shbio
snippet shbio
	${1:target}.should be_instance_of(${2:class})
	${3}

#its
snippet its
	it "should ${1:do something}" do${2}

#anra
snippet anra
	and_raise(${1:exception})

#tw
snippet tw
	twice

#shh
snippet shh
	${1:target}.should have(${2:num}).${3:things}
	${4}

#shbc
snippet shbc
	${1:target}.should be_close(${2:result}, ${3:tolerance})
	${4}

#shnbko
snippet shnbko
	${1:target}.should_not be_a_kind_of(${2:klass})
	${3}

#shnredt
snippet shnredt
	response.should_not redirect_to(${1:url})
	${2}

#shham
snippet shham
	${1:target}.should have_at_most(${2:num}).${3:things}
	${4}

#aft
snippet aft
	after(${1::each}) do
		${2}
	end

#it
snippet it
	it "${1}" do
		${2}
	end

#dest
snippet dest
	describe ${1:Type} do
		${2}
	end

#shnbs
snippet shnbs
	response.should_not be_success
	${1}

#sh
snippet sh
	${1:target}.should == ${2:value}
	${3}

#shn
snippet shn
	${1:target}.should_not == ${2:value}
	${3}

#shp
snippet shp
	${1:target}.should be_${2:predicate}

#shns
snippet shns
	${1:target}.should_not satisfy { |${2:obj}| ${3} }
	${4}

#conn
snippet conn
	controller_name :${1:controller}

#shdm
snippet shdm
	${1:target}.should match(/${2:regexp}/)
	${3}

#shnbr
snippet shnbr
	response.should_not be_redirect
	${1}

#shneq
snippet shneq
		${1:target}.should_not equal(${2:value})
		${3}

#annot
snippet annot
	any_number_of_times

#shnc
snippet shnc
	lambda do
		${1}
	end.should_not change(${2:target}, :${3:method})

#shrt
snippet shrt
	${1:target}.should respond_to(:${2:sym})
	${3}

#shbr
snippet shbr
	response.should be_redirect
	${1}

#shre
snippet shre
	${1:target}.should raise_error(${2:error})
	${3}

#wia
snippet wia
	with(${1:args})
	${2}

#shhal
snippet shhal
	${1:target}.should have_at_least(${2:num}).${3:things}
	${4}

#mat
snippet mat
	class ${1:ReverseTo}
		def initialize(${2:param})
			@$2 = $2
		end
	
		def matches?(actual)
			@actual = actual
			# Satisfy expectation here. Return false or raise an error if it's not met.
			${3:@actual.reverse.should == @$2}
			true
		end
	
		def failure_message
			"expected #{@actual.inspect} to ${4} #{@$2.inspect}, but it didn't"
		end
	
		def negative_failure_message
			"expected #{@actual.inspect} not to ${5} #{@$2.inspect}, but it did"
		end
	end
	
	def ${6:reverse_to}(${7:expected})
		${8}.new($7)
	end

#sef
snippet sef
	shared_examples_for "${1:do something}" do
	  ${2}
	end

#ant
snippet ant
	and_throw(${1:sym})

#shnbio
snippet shnbio
	${1:target}.should_not be_instance_of(${2:klass})
	${3}

#shr
snippet shr
	${1:mock}.should_receive(:${2:message})${3}
	${4}

#shnr
snippet shnr
	${1:mock}.should_not_receive(:${2:message})${3}
	${4}

#shs
snippet shs
	${1:target}.should satisfy { |${2:obj}| ${3} }
	${4}

#shnm
snippet shnm
	${1:target}.should_not match(/${2:regexp}/)
	${3}

#bef
snippet bef
	before(${1::each}) do
		${2}
	end

#she
snippet she
	${1:target}.should eql(${2:value})
	${3}

#shbko
snippet shbko
	${1:target}.should be_a_kind_of(${2:class})
	${3}

#shnb
snippet shnb
	${1:target}.should_not be(${2:result})
	${3}

#shnre
snippet shnre
	${1:target}.should_not raise_error(${2:error})
	${3}

#shnrt
snippet shnrt
	${1:target}.should_not respond_to(:${2:sym})
	${3}

#shredt
snippet shredt
	response.should redirect_to(${1:url})
	${2}

#ex
snippet ex
	exactly(${1:n}).times

#shbs
snippet shbs
	response.should be_success
	${1}

#on
snippet on
	once

#atm
snippet atm
	at_most(${1:n}).times

#dests
snippet dests
	describe ${1:Type}, "${2:description}" do
		${3}
	end

#mm
snippet mm
	mock_model(${1:model})${2}

#desrc
snippet desrc
	describe ${1:controller}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4}" do
		${5}
	end

#shnp
snippet shnp
	${1:target}.should_not be_${2:predicate}

#mocw
snippet mocw
	Spec::Runner.configure do |config|
		config.mock_with :${1:mocha|flexmock|rr}
	end

#any
snippet any
	and_yield(${1:values})

#shhr
snippet shhr
	${1:target}.should have(${2:n}).records
	${3}

#resh
snippet resh
	require File.dirname(__FILE__) + '/../spec_helper'

#shb
snippet shb
	${1:target}.should be(${2:result})
	${3}

