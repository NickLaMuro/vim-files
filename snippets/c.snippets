#map
snippet map
	std::map<${1:key}, ${2:value}> map${3};

#t
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}'

#cl
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
		public:
			$1 (${2:arguments});
			virtual ~$1 ();
		private:
			${3:/* data */}
	};

#wh
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}

#tds
snippet tds
	typedef struct {
		${2:/* data */}
	} ${1:`Filename('$1_t', 'name')`};

#def
snippet def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}

#st
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}

#pr
snippet pr
	printf("${1:%s}\n"${2});${3}

#if
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}

#fpf
snippet fpf
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}

#fun
snippet fun
	${1:void} ${2:function_name} (${3})
	{
		${4:/* code */}
	}

#vector
snippet vector
	std::vector<${1:char}> v${2};

#ns
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */

#main
snippet main
	int main (int argc, char const* argv[])
	{
		${1:/* code */}
		return 0;
	}

#once
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1
	
	${2}
	
	#endif /* end of include guard: $1 */

#td
snippet td
	typedef ${1:int} ${2:MyCustomType};

#readfile
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}

#for
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}


#inc
----------

#inc.inc
snippet inc inc
	#include "${1:`Filename("$1.h")`}"${2}


#inc.inc_global
snippet inc inc_global
	#include <${1:stdio}.h>${2}


----------

#do
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});

#el
snippet el
	else {
		${1}
	}

#forr
snippet forr
	for (${1:i} = 0; ${2:$1 < 5}; $1${3:++}) {
		${4:/* code */}
	}

